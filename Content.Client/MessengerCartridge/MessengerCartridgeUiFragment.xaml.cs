using Content.Shared.CartridgeLoader.Cartridges;
using Content.Shared.MessengerCartridge;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.MessengerCartridge;

[GenerateTypedNameReferences]
public sealed partial class MessengerCartridgeUiFragment : BoxContainer
{
    // where EntityUid is to receiver and string is message
    public event Action<EntityUid, string>? OnMessageSendButtonPressed;

    // where EntityUid is from sender
    public event Action<EntityUid>? OnHistoryViewPressed;

    public event Action<bool>? OnBackButtonPressed;

    public EntityUid CurrentChat;

    private readonly StyleBoxFlat _styleBox = new()
    {
        BackgroundColor = Color.Transparent,
        BorderColor = Color.FromHex("#5a5a5a"),
        BorderThickness = new Thickness(0, 0, 0, 1)
    };

    public MessengerCartridgeUiFragment()
    {
        RobustXamlLoader.Load(this);

        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        SendButton.OnPressed += _ =>
        {
            OnMessageSendButtonPressed?.Invoke(CurrentChat, MessageInput.Text);
            MessageInput.Clear();
        };

        BackButton.OnPressed += _ =>
        {
            OnBackButtonPressed?.Invoke(true);
        };
    }

    public void UpdateState(MessengerCartridgeUiState state)
    {
        ChatsContainer.RemoveAllChildren();

        foreach (var chat in state.Chats)
        {
            var chatItem = new MessengerCartridgeUiChatItem();

            chatItem.ChatName.Text = chat.FullName;
            chatItem.OpenChatHistoryButton.OnPressed += _ =>
            {
                OnHistoryViewPressed?.Invoke(chat.IdCardUid);
            };

            ChatsContainer.AddChild(chatItem);
        }

        BackButton.Visible = false;
        MessageInput.Visible = false;
        SendButton.Visible = false;
    }
}
