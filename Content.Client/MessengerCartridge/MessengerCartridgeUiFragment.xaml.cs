using System.Linq;
using Content.Shared.MessengerCartridge;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.MessengerCartridge;

[GenerateTypedNameReferences]
public sealed partial class MessengerCartridgeUiFragment : BoxContainer
{
    /// <summary>
    ///     Event to change the online state of messenger cartridge.
    /// </summary>
    public event Action? ChangeOnlineStatusButtonPressed;

    /// <summary>
    ///     Send message to other messenger cartridge.
    /// </summary>
    public event Action<EntityUid?, string>? OnMessageSendButtonPressed;

    /// <summary>
    ///     Get the chat history from MessengerServerSystem.
    /// </summary>
    public event Action<EntityUid>? OnHistoryViewPressed;

    /// <summary>
    ///     Event to go back from chat history to messenger contact list.
    /// </summary>
    public event Action? OnBackButtonPressed;

    /// <summary>
    ///     Current open chat MessengerContact Uid.
    /// </summary>
    private MessengerContact? CurrentChat { get; set; }

    public MessengerCartridgeUiFragment()
    {
        RobustXamlLoader.Load(this);

        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        SendButton.OnPressed += _ =>
        {
            OnMessageSendButtonPressed?.Invoke(CurrentChat?.IdCardUid, MessageInput.Text);
            MessageInput.Clear();
        };
        BackButton.OnPressed += _ => OnBackButtonPressed?.Invoke();
        ChangeOnlineStatusButton.OnPressed += _ => ChangeOnlineStatusButtonPressed?.Invoke();
    }

    public void UpdateState(MessengerCartridgeUiState state)
    {
        switch(state.UpdateEventType)
        {
            case MessengerCartridgeUiEventType.GetChatContacts:
                UpdateContactWindow(state);
                break;
            case MessengerCartridgeUiEventType.GetChatHistory:
            case MessengerCartridgeUiEventType.NewMessage:
                UpdateChatHistoryWindow(state);
                break;
            case MessengerCartridgeUiEventType.Unknown:
            case MessengerCartridgeUiEventType.SendMessage:
            case MessengerCartridgeUiEventType.ChangeOnlineState:
            default:
                break;
        }

        if (state.IsOnline.HasValue)
        {
            var localizationOnlineStateString = $"messenger-program-{(state.IsOnline.Value ? "online" : "offline")}";
            OnlineStatus.Text = localizationOnlineStateString;
            ChangeOnlineStatusButton.Text = $"{localizationOnlineStateString}-button";
        }
    }

    private void UpdateContactWindow(MessengerCartridgeUiState state)
    {
        ContactWindow.Visible = true;
        ChatHistoryWindow.Visible = false;

        CurrentChat = null;

        ContactList.RemoveAllChildren();
        foreach (var chat in state.Chats)
        {
            var chatItem = new MessengerCartridgeUiChatItem();

            chatItem.ChatName.Text = chat.FullName;
            chatItem.OpenChatHistoryButton.OnPressed += _ =>
            {
                OnHistoryViewPressed?.Invoke(chat.IdCardUid);
            };

            ContactList.AddChild(chatItem);
        }
    }

    private void UpdateChatHistoryWindow(MessengerCartridgeUiState state)
    {
        ContactWindow.Visible = false;
        ChatHistoryWindow.Visible = true;

        CurrentChat = state.CurrentOpenChat;

        ChatHistory.RemoveAllChildren();
        if (CurrentChat != null)
        {
            foreach (var message in state.Messages)
            {
                var messageItem = new Label();

                var isIncoming = message.From == CurrentChat.IdCardUid;
                messageItem.Text = $"{(isIncoming ? CurrentChat.FullName : "You")} : {message.Text}";
                messageItem.Align = isIncoming ? Label.AlignMode.Left : Label.AlignMode.Right;

                ChatHistory.AddChild(messageItem);
            }
        }
    }
}
